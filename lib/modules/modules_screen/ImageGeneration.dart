import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'dart:async';






Future<String> getJsonFromGithubGist() async {
  final response = await http.get(Uri.parse('https://gist.githubusercontent.com/HusseinElwakeel/5f866c3f8229e4b18f9ce9e9a8561c7e/raw'));

  if (response.statusCode == 200) {
    // If the server returns a 200 OK response, parse the JSON.
    Map<String, dynamic> json = jsonDecode(response.body);
    return await json['image_generation_url'];
    // You can now use these variables in your app.
  } else {
    // If the server did not return a 200 OK response, throw an exception.
    throw Exception('Failed to load JSON from GitHub Gist');
  }
}

// var defual_value = "ŸçSorry, we can't simplify this text";
// var api_url = "https://13d7-34-105-55-38.ngrok.io/text_to_image/";
var defual_value = "";

// send a post request to the api
// request body: {'text_prompt': text_prompt, 'steps': steps}
Future<String> generate_image(String text_prompt, int steps) async {
  //new
  String api_url = await getJsonFromGithubGist();
  // print(api_url);
  //
  final response = await http.post(Uri.parse(api_url),
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
      }, body: jsonEncode(<String, dynamic>{'text_prompt': text_prompt,
      'steps': steps,}));
  if (response.statusCode == 200) {
    return jsonDecode(response.body)['image_base64'];
  } else {
    throw Exception('Failed to load response');
  }
}


class ImageGeneration extends StatefulWidget {
  @override
  _ImageGenerationState createState() => _ImageGenerationState();
}

class _ImageGenerationState extends State<ImageGeneration> {
  final TextEditingController controller = TextEditingController();

  var output_image_base64 = defual_value;

  @override
  void dispose() {
    controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return SingleChildScrollView(scrollDirection: Axis.vertical,
      child: Column(children: [
        Padding(padding: const EdgeInsets.all(10.0),
          child: Center(child: Text("Image Generation",
            style: TextStyle(fontSize: 30, fontWeight: FontWeight.bold,),),),),
        Padding(padding: const EdgeInsets.all(27.0),
          child: TextField(
            maxLength: 300,
            controller: controller,
            decoration: InputDecoration(

              // to write this in text field
              //   labelText: "Enter Your Text :",
                hintText: "Enter Your Text ...",
                border: OutlineInputBorder(

                  borderRadius: BorderRadius.circular(20),)),

            // to identify size of text field
            maxLines: 2,

            onTap: () {},

            style: TextStyle(fontSize: 25,),),),
        TextButton(onPressed: () async {
          //  get text from text field
          var text = controller.text;
          if (text.isEmpty) {
            return;
          }

          var result = await generate_image(text, 25);
          setState(() {
            result = (result?.isEmpty ?? true
                ? defual_value
                : result!);

            result = result.substring(23,);
            output_image_base64 = result;
          });
        },
            child: Padding(padding: const EdgeInsets.all(8.0),
              child: Container(alignment: Alignment.center,
                  width: 150,
                  height: 50,
                  decoration: BoxDecoration(color: Color.fromRGBO(230 ,26, 26, 1),
                    borderRadius: BorderRadius.circular(20),),
                  child: Padding(padding: const EdgeInsets.all(2.0),
                    child: Text(" Generate",
                      style: TextStyle(
                        color: Colors.white,
                      fontSize: 26,
                      ),

                    ),
                  ),
              ),
            ),
        ),
        Padding(padding: const EdgeInsets.all(20.0),
          child: Container(width: 400,
            height: 400,
            decoration: BoxDecoration(borderRadius: BorderRadius.circular(60),
              color: Colors.grey[400],),
            child: Image.memory(Base64Decoder().convert(output_image_base64),
              fit: BoxFit.cover, height: 400, width: 400,),),),
      ],),);
  }
}


